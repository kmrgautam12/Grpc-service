// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: example.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	GetRecord_PersonRecord_FullMethodName = "/ConsumerInfo.GetRecord/PersonRecord"
)

// GetRecordClient is the client API for GetRecord service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetRecordClient interface {
	PersonRecord(ctx context.Context, in *PersonRecordRequest, opts ...grpc.CallOption) (*PersonRecordResponse, error)
}

type getRecordClient struct {
	cc grpc.ClientConnInterface
}

func NewGetRecordClient(cc grpc.ClientConnInterface) GetRecordClient {
	return &getRecordClient{cc}
}

func (c *getRecordClient) PersonRecord(ctx context.Context, in *PersonRecordRequest, opts ...grpc.CallOption) (*PersonRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PersonRecordResponse)
	err := c.cc.Invoke(ctx, GetRecord_PersonRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetRecordServer is the server API for GetRecord service.
// All implementations must embed UnimplementedGetRecordServer
// for forward compatibility
type GetRecordServer interface {
	PersonRecord(context.Context, *PersonRecordRequest) (*PersonRecordResponse, error)
	mustEmbedUnimplementedGetRecordServer()
}

// UnimplementedGetRecordServer must be embedded to have forward compatible implementations.
type UnimplementedGetRecordServer struct {
}

func (UnimplementedGetRecordServer) PersonRecord(context.Context, *PersonRecordRequest) (*PersonRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PersonRecord not implemented")
}
func (UnimplementedGetRecordServer) mustEmbedUnimplementedGetRecordServer() {}

// UnsafeGetRecordServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetRecordServer will
// result in compilation errors.
type UnsafeGetRecordServer interface {
	mustEmbedUnimplementedGetRecordServer()
}

func RegisterGetRecordServer(s grpc.ServiceRegistrar, srv GetRecordServer) {
	s.RegisterService(&GetRecord_ServiceDesc, srv)
}

func _GetRecord_PersonRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetRecordServer).PersonRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GetRecord_PersonRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetRecordServer).PersonRecord(ctx, req.(*PersonRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GetRecord_ServiceDesc is the grpc.ServiceDesc for GetRecord service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetRecord_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ConsumerInfo.GetRecord",
	HandlerType: (*GetRecordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PersonRecord",
			Handler:    _GetRecord_PersonRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "example.proto",
}
